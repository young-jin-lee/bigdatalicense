(pred <- predict(locmodel_lap, locations_test, type = 'prob'))
summary(locations_train)
##################################### naive bayes
load("donors.RData")
sum(donors_train$age < 5)
donors_train <- donors_train[donors_train$age >= 5, ]
donors_test <- donors_test[donors_test$age >= 5, ]
str(donors_train)
sum(is.na(donors_train))
donors_train <- donors_train[complete.cases(donors_train), ]
sum(is.na(donors_test))
donors_test <- donors_test[complete.cases(donors_test), ]
str(donors_train)
donors_train <- as.data.frame(sapply(donors_train, function(x){as.factor(x)}))
donors_test <- as.data.frame(sapply(donors_test, function(x){as.factor(x)}))
donors_train$age <- as.integer(donors_train$age)
donors_test$age <- as.integer(donors_test$age)
donors_train$age <- as.integer(donors_train$age)
donors_test$age <- as.integer(donors_test$age)
str(donors_train)
(donors_model_lap <- naive_bayes(donated ~ ., data = donors_train, laplace = 1))
(pred <- predict(donors_model_lap, donors_test, type = 'prob'))
pred[,1]
pred_new <- ifelse(pred[,1] > 0.9,
'n', 'y')
pred_new
##################################### naive bayes
load("donors.RData")
sum(donors_train$age < 5)
donors_train <- donors_train[donors_train$age >= 5, ]
donors_test <- donors_test[donors_test$age >= 5, ]
sum(is.na(donors_train))
donors_train <- donors_train[complete.cases(donors_train), ]
sum(is.na(donors_test))
donors_test <- donors_test[complete.cases(donors_test), ]
str(donors_train)
donors_train <- as.data.frame(sapply(donors_train, function(x){as.factor(x)}))
donors_test <- as.data.frame(sapply(donors_test, function(x){as.factor(x)}))
donors_train$age <- as.integer(donors_train$age)
donors_test$age <- as.integer(donors_test$age)
donors_train$donated <- ifelse(donors_train$donated == 1, 'y', 'n')
donors_test$donated <- ifelse(donors_test$donated == 1, 'y', 'n')
(donors_model_lap <- naive_bayes(donated ~ ., data = donors_train, laplace = 1))
(pred <- predict(donors_model_lap, donors_test, type = 'prob'))
pred[,1]
pred_new <- ifelse(pred[,1] > 0.9,
'n', 'y')
(pred_new <- ifelse(pred[,1] > 0.9,
'n', 'y'))
#accuracy
mean(donors_test$donated == pred_new)
#precision
cmat[2,2] / sum(cmat[,2])
#recall
cmat[2,2] / sum(cmat[2,])
(cmat <- table(donors_test$donated, pred_new))
#precision
cmat[2,2] / sum(cmat[,2])
#recall
cmat[2,2] / sum(cmat[2,])
(pred_new <- ifelse(pred[,1] > 0.95,
'n', 'y'))
(cmat <- table(donors_test_label, test_pred_new))
#accuracy
mean(donors_test$donated == pred_new)
(cmat <- table(donors_test$donated, pred_new))
#precision
cmat[2,2] / sum(cmat[,2])
#recall
cmat[2,2] / sum(cmat[2,])
##################################### naive bayes
load("donors.RData")
sum(donors_train$age < 5)
donors_train <- donors_train[donors_train$age >= 5, ]
donors_test <- donors_test[donors_test$age >= 5, ]
sum(is.na(donors_train))
donors_train <- donors_train[complete.cases(donors_train), ]
sum(is.na(donors_test))
donors_test <- donors_test[complete.cases(donors_test), ]
str(donors_train)
donors_train <- as.data.frame(sapply(donors_train, function(x){as.factor(x)}))
donors_test <- as.data.frame(sapply(donors_test, function(x){as.factor(x)}))
donors_train$age <- as.integer(donors_train$age)
donors_test$age <- as.integer(donors_test$age)
donors_train$donated <- ifelse(donors_train$donated == 1, 'y', 'n')
donors_test$donated <- ifelse(donors_test$donated == 1, 'y', 'n')
(donors_model_lap <- naive_bayes(donated ~ ., data = donors_train, laplace = 1))
(pred <- predict(donors_model_lap, donors_test, type = 'prob'))
# ROC curve
plot(performance(prediction(pred[,1], donors_test$donated == 'n'),
'tpr', 'fpr'))
# AUC
calAUC(pred[,1], donors_test$donated == 'n')
calAUC <- function(predCol, targetCol){
perf <- performance(prediction(predCol, targetCol),
'auc')
as.numeric(perf@y.values)
}
# AUC
calAUC(pred[,1], donors_test$donated == 'n')
#accuracy
mean(donors_test$donated == pred_new)
get_accuracy <- function(tble)
{
return ((tble[1,1] + tble[2,2]) / sum(tble))
}
get_precision <- function(tble)
{
return (tble[2,2] / (tble[2,1] + tble[2,2]))
}
get_recall <- function(tble)
{
return (tble[2,2] / (tble[1,2] + tble[2,2]))
}
calAUC <- function(predCol, targetCol){
perf <- performance(prediction(predCol, targetCol),
'auc')
as.numeric(perf@y.values)
}
##################################### naive bayes
load("donors.RData")
sum(donors_train$age < 5)
donors_train <- donors_train[donors_train$age >= 5, ]
donors_test <- donors_test[donors_test$age >= 5, ]
sum(is.na(donors_train))
donors_train <- donors_train[complete.cases(donors_train), ]
sum(is.na(donors_test))
donors_test <- donors_test[complete.cases(donors_test), ]
str(donors_train)
donors_train <- as.data.frame(sapply(donors_train, function(x){as.factor(x)}))
donors_test <- as.data.frame(sapply(donors_test, function(x){as.factor(x)}))
donors_train$age <- as.integer(donors_train$age)
donors_test$age <- as.integer(donors_test$age)
donors_train$donated <- ifelse(donors_train$donated == 1, 'y', 'n')
donors_test$donated <- ifelse(donors_test$donated == 1, 'y', 'n')
(donors_model_lap <- naive_bayes(donated ~ ., data = donors_train, laplace = 1))
(pred <- predict(donors_model_lap, donors_test, type = 'prob'))
pred[,1]
(pred_new <- ifelse(pred[,1] > 0.95,
'n', 'y'))
(cmat <- table(donors_test_label, test_pred_new))
(cmat <- table(donors_test$donated, test_pred_new))
(cmat <- table(donors_test$donated, pred_new))
# ROC curve
plot(performance(prediction(pred[,1], donors_test$donated == 'n'),
'tpr', 'fpr'))
# AUC
calAUC(pred[,1], donors_test$donated == 'n')
#accuracy
mean(donors_test$donated == pred_new)
#confusion matrix
(cmat <- table(donors_test$donated, pred_new))
#precision
cmat[2,2] / sum(cmat[,2])
#recall
cmat[2,2] / sum(cmat[2,])
##################################### naive bayes
load("donors.RData")
sum(donors_train$age < 5)
donors_train <- donors_train[donors_train$age >= 5, ]
donors_test <- donors_test[donors_test$age >= 5, ]
sum(is.na(donors_train))
donors_train <- donors_train[complete.cases(donors_train), ]
sum(is.na(donors_test))
donors_test <- donors_test[complete.cases(donors_test), ]
str(donors_train)
donors_train <- as.data.frame(sapply(donors_train, function(x){as.factor(x)}))
donors_test <- as.data.frame(sapply(donors_test, function(x){as.factor(x)}))
donors_train$age <- as.integer(donors_train$age)
donors_test$age <- as.integer(donors_test$age)
donors_train$age_group <- cut(donors_train$age, breaks = c(-Inf, 19,29,39,49,59,69,79,89,Inf))
levels(donors_train$age_group) <-  c('<20', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79','80-89','90+')
donors_test$age_group <- cut(donors_test$age, breaks = c(-Inf, 19,29,39,49,59,69,79,89,Inf))
levels(donors_test$age_group) <-  c('<20', '20-29', '30-39', '40-49', '50-59','60-69', '70-79','80-89','90+')
donors_train$age <- NULL
donors_test$age <- NULL
donors_train$donated <- ifelse(donors_train$donated == 1, 'y', 'n')
donors_test$donated <- ifelse(donors_test$donated == 1, 'y', 'n')
(donors_model_lap <- naive_bayes(donated ~ ., data = donors_train, laplace = 1))
(pred <- predict(donors_model_lap, donors_test, type = 'prob'))
pred[,1]
(pred_new <- ifelse(pred[,1] > 0.95,
'n', 'y'))
(cmat <- table(donors_test$donated, pred_new))
# ROC curve
plot(performance(prediction(pred[,1], donors_test$donated == 'n'),
'tpr', 'fpr'))
# AUC
calAUC(pred[,1], donors_test$donated == 'n')
#accuracy
mean(donors_test$donated == pred_new)
#confusion matrix
(cmat <- table(donors_test$donated, pred_new))
#precision
cmat[2,2] / sum(cmat[,2])
#recall
cmat[2,2] / sum(cmat[2,])
##################################### naive bayes
load("donors.RData")
calAUC <- function(predCol, targetCol){
perf <- performance(prediction(predCol, targetCol),
'auc')
as.numeric(perf@y.values)
}
load("donors.RData")
sum(donors_train$age < 5)
donors_train <- donors_train[donors_train$age >= 5, ]
donors_test <- donors_test[donors_test$age >= 5, ]
sum(is.na(donors_train))
donors_train <- donors_train[complete.cases(donors_train), ]
sum(is.na(donors_test))
donors_test <- donors_test[complete.cases(donors_test), ]
str(donors_train)
donors_train <- as.data.frame(sapply(donors_train, function(x){as.factor(x)}))
donors_test <- as.data.frame(sapply(donors_test, function(x){as.factor(x)}))
donors_train$age <- as.integer(donors_train$age)
donors_test$age <- as.integer(donors_test$age)
donors_train$donated <- ifelse(donors_train$donated == 1, 'y', 'n')
donors_test$donated <- ifelse(donors_test$donated == 1, 'y', 'n')
(donors_model_lap <- naive_bayes(donated ~ ., data = donors_train, laplace = 1))
(pred <- predict(donors_model_lap, donors_test, type = 'prob'))
pred[,1]
(pred_new <- ifelse(pred[,1] > 0.95,
'n', 'y'))
(cmat <- table(donors_test$donated, pred_new))
# ROC curve
plot(performance(prediction(pred[,1], donors_test$donated == 'n'),
'tpr', 'fpr'))
# AUC
calAUC(pred[,1], donors_test$donated == 'n')
#accuracy
mean(donors_test$donated == pred_new)
calAUC <- function(predCol, targetCol){
perf <- performance(prediction(predCol, targetCol),
'auc')
as.numeric(perf@y.values)
}
load("donors.RData")
sum(donors_train$age < 5)
donors_train <- donors_train[donors_train$age >= 5, ]
donors_test <- donors_test[donors_test$age >= 5, ]
sum(is.na(donors_train))
donors_train <- donors_train[complete.cases(donors_train), ]
sum(is.na(donors_test))
donors_test <- donors_test[complete.cases(donors_test), ]
str(donors_train)
donors_train <- as.data.frame(sapply(donors_train, function(x){as.factor(x)}))
donors_test <- as.data.frame(sapply(donors_test, function(x){as.factor(x)}))
donors_train$age <- as.integer(donors_train$age)
donors_test$age <- as.integer(donors_test$age)
donors_train$age_group <- cut(donors_train$age, breaks = c(-Inf, 19,29,39,49,59,69,79,89,Inf))
levels(donors_train$age_group) <-  c('<20', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79','80-89','90+')
donors_test$age_group <- cut(donors_test$age, breaks = c(-Inf, 19,29,39,49,59,69,79,89,Inf))
levels(donors_test$age_group) <-  c('<20', '20-29', '30-39', '40-49', '50-59','60-69', '70-79','80-89','90+')
donors_train$age <- NULL
donors_test$age <- NULL
donors_train$donated <- ifelse(donors_train$donated == 1, 'y', 'n')
donors_test$donated <- ifelse(donors_test$donated == 1, 'y', 'n')
(donors_model_lap <- naive_bayes(donated ~ ., data = donors_train, laplace = 1))
(pred <- predict(donors_model_lap, donors_test, type = 'prob'))
pred[,1]
(pred_new <- ifelse(pred[,1] > 0.95,
'n', 'y'))
(cmat <- table(donors_test$donated, pred_new))
# ROC curve
plot(performance(prediction(pred[,1], donors_test$donated == 'n'),
'tpr', 'fpr'))
# AUC
calAUC(pred[,1], donors_test$donated == 'n')
calAUC <- function(predCol, targetCol){
perf <- performance(prediction(predCol, targetCol),
'auc')
as.numeric(perf@y.values)
}
load("donors.RData")
sum(donors_train$age < 5)
donors_train <- donors_train[donors_train$age >= 5, ]
donors_test <- donors_test[donors_test$age >= 5, ]
sum(is.na(donors_train))
donors_train <- donors_train[complete.cases(donors_train), ]
sum(is.na(donors_test))
donors_test <- donors_test[complete.cases(donors_test), ]
str(donors_train)
donors_train <- as.data.frame(sapply(donors_train, function(x){as.factor(x)}))
donors_test <- as.data.frame(sapply(donors_test, function(x){as.factor(x)}))
donors_train$age <- as.integer(donors_train$age)
donors_test$age <- as.integer(donors_test$age)
donors_train$donated <- ifelse(donors_train$donated == 1, 'y', 'n')
donors_test$donated <- ifelse(donors_test$donated == 1, 'y', 'n')
(donors_model_lap <- naive_bayes(donated ~ ., data = donors_train, laplace = 1))
(pred <- predict(donors_model_lap, donors_test, type = 'prob'))
pred[,1]
(pred_new <- ifelse(pred[,1] > 0.95,
'n', 'y'))
(cmat <- table(donors_test$donated, pred_new))
# ROC curve
plot(performance(prediction(pred[,1], donors_test$donated == 'n'),
'tpr', 'fpr'))
# AUC
calAUC(pred[,1], donors_test$donated == 'n')
#accuracy
mean(donors_test$donated == pred_new)
#confusion matrix
(cmat <- table(donors_test$donated, pred_new))
#precision
cmat[2,2] / sum(cmat[,2])
#recall
cmat[2,2] / sum(cmat[2,])
# exploration
summary(donors_train)
# explore
summary(donors_train)
calAUC <- function(predCol, targetCol){
perf <- performance(prediction(predCol, targetCol),
'auc')
as.numeric(perf@y.values)
}
load("donors.RData")
# preprocessing
sum(donors_train$age < 5)
donors_train <- donors_train[donors_train$age >= 5, ]
donors_test <- donors_test[donors_test$age >= 5, ]
sum(is.na(donors_train))
donors_train <- donors_train[complete.cases(donors_train), ]
sum(is.na(donors_test))
donors_test <- donors_test[complete.cases(donors_test), ]
str(donors_train)
donors_train <- as.data.frame(sapply(donors_train, function(x){as.factor(x)}))
donors_test <- as.data.frame(sapply(donors_test, function(x){as.factor(x)}))
donors_train$age <- as.integer(donors_train$age)
donors_test$age <- as.integer(donors_test$age)
donors_train$donated <- ifelse(donors_train$donated == 1, 'y', 'n')
donors_test$donated <- ifelse(donors_test$donated == 1, 'y', 'n')
donors_train$donated <- as.factor(donors_train$donated)
donors_test$donated <- as.factor(donors_test$donated)
# explore
summary(donors_train)
# predict
(donors_model_lap <- naive_bayes(donated ~ ., data = donors_train, laplace = 1))
(pred <- predict(donors_model_lap, donors_test, type = 'prob'))
pred[,1]
(pred_new <- ifelse(pred[,1] > 0.95,
'n', 'y'))
(cmat <- table(donors_test$donated, pred_new))
# ROC curve
plot(performance(prediction(pred[,1], donors_test$donated == 'n'),
'tpr', 'fpr'))
# AUC
calAUC(pred[,1], donors_test$donated == 'n')
# explore
summary(donors_train)
table(donors_train$donated, donors_train$veteran)
table(donated: donors_train$donated, donors_train$veteran)
table(donated = donors_train$donated, donors_train$veteran)
table(donated = donors_train$donated, donors_train$bad_address)
table(donated = donors_train$donated, donors_train$age)
table(donated = donors_train$donated, donors_train$has_children)
table(donated = donors_train$donated, donors_train$wealth_rating)
table(donated = donors_train$donated, donors_train$interest_veterans)
table(donated = donors_train$donated, donors_train$interest_religion)
table(donated = donors_train$donated, donors_train$pet_owner)
table(donated = donors_train$donated, donors_train$catalog_shopper)
table(donated = donors_train$donated, donors_train$recency)
table(donated = donors_train$donated, donors_train$frequency)
table(donated = donors_train$donated, donors_train$money)
table(donated = donors_train$donated, donors_train$veteran)
table(donated = donors_train$donated, donors_train$bad_address)
table(donated = donors_train$donated, donors_train$has_children)
table(donated = donors_train$donated, donors_train$wealth_rating)
table(donated = donors_train$donated, donors_train$interest_veterans)
table(donated = donors_train$donated, donors_train$interest_religion)
table(donated = donors_train$donated, donors_train$pet_owner)
table(donated = donors_train$donated, donors_train$catalog_shopper)
table(donated = donors_train$donated, donors_train$recency)
table(donated = donors_train$donated, donors_train$frequency)
table(donated = donors_train$donated, donors_train$money)
donors_train$donated <- NULL
donors_train[!duplicated(donors_train), ]
length(donors_train[!duplicated(donors_train), ])
length(donors_train[duplicated(donors_train), ])
donors_train[duplicated(donors_train), ]
duplicated(donors_train)
df[duplicated(df), ]
a <- c(rep("A", 3), rep("B", 3), rep("C",2))
b <- c(1,1,2,4,1,1,2,2)
df <-data.frame(a,b)
df[duplicated(df), ]
(df <-data.frame(a,b))
df[duplicated(df), ]
df[!duplicated(df), ]
df[duplicated(df), ]
duplicated(df)
sum(duplicated(df))
(df <-data.frame(a,b))
sum(duplicated(donors_train))
donors_train[duplicated(donors_train), ]
donors_train[!duplicated(donors_train), ]
sum(duplicated(df))
df[duplicated(df), ]
df[!duplicated(df), ]
a <- c(rep("A", 3), rep("B", 3), rep("C",2))
b <- c(1,1,2,4,1,1,2,2)
(df <-data.frame(a,b))
df[!duplicated(df[,-1]), ]
calAUC <- function(predCol, targetCol){
perf <- performance(prediction(predCol, targetCol),
'auc')
as.numeric(perf@y.values)
}
load("donors.RData")
# preprocessing
sum(donors_train$age < 5)
donors_train <- donors_train[donors_train$age >= 5, ]
donors_test <- donors_test[donors_test$age >= 5, ]
sum(is.na(donors_train))
donors_train <- donors_train[complete.cases(donors_train), ]
sum(is.na(donors_test))
donors_test <- donors_test[complete.cases(donors_test), ]
str(donors_train)
donors_train <- as.data.frame(sapply(donors_train, function(x){as.factor(x)}))
donors_test <- as.data.frame(sapply(donors_test, function(x){as.factor(x)}))
donors_train$age <- as.integer(donors_train$age)
donors_test$age <- as.integer(donors_test$age)
donors_train$donated <- ifelse(donors_train$donated == 1, 'y', 'n')
donors_test$donated <- ifelse(donors_test$donated == 1, 'y', 'n')
donors_train$donated <- as.factor(donors_train$donated)
donors_test$donated <- as.factor(donors_test$donated)
# explore
summary(donors_train)
table(donated = donors_train$donated, donors_train$veteran)
table(donated = donors_train$donated, donors_train$bad_address)
table(donated = donors_train$donated, donors_train$has_children)
table(donated = donors_train$donated, donors_train$wealth_rating)
table(donated = donors_train$donated, donors_train$interest_veterans)
table(donated = donors_train$donated, donors_train$interest_religion)
table(donated = donors_train$donated, donors_train$pet_owner)
table(donated = donors_train$donated, donors_train$catalog_shopper)
table(donated = donors_train$donated, donors_train$recency)
table(donated = donors_train$donated, donors_train$frequency)
table(donated = donors_train$donated, donors_train$money)
#donors_train[duplicated(donors_train), ]
donors_train <- donors_train[!duplicated(donors_train[,-1]), ]
View(donors_test)
View(donors_train)
summary(donors_train$donated)
set.seed(2018)
threshold <- 0.95
(donors_model_lap <- naive_bayes(donated ~ ., data = donors_train, laplace = 1))
(pred <- predict(donors_model_lap, donors_test, type = 'prob'))
pred[,1]
(pred_new <- ifelse(pred[,1] > threshold,
'n', 'y'))
(cmat <- table(donors_test$donated, pred_new))
# ROC curve
plot(performance(prediction(pred[,1], donors_test$donated == 'n'),
'tpr', 'fpr'))
# AUC
calAUC(pred[,1], donors_test$donated == 'n')
##################################### naive bayes
calAUC <- function(predCol, targetCol){
perf <- performance(prediction(predCol, targetCol),
'auc')
as.numeric(perf@y.values)
}
load("donors.RData")
# preprocessing
sum(donors_train$age < 5)
donors_train <- donors_train[donors_train$age >= 5, ]
donors_test <- donors_test[donors_test$age >= 5, ]
sum(is.na(donors_train))
donors_train <- donors_train[complete.cases(donors_train), ]
sum(is.na(donors_test))
donors_test <- donors_test[complete.cases(donors_test), ]
str(donors_train)
donors_train <- as.data.frame(sapply(donors_train, function(x){as.factor(x)}))
donors_test <- as.data.frame(sapply(donors_test, function(x){as.factor(x)}))
donors_train$age <- as.integer(donors_train$age)
donors_test$age <- as.integer(donors_test$age)
donors_train$donated <- ifelse(donors_train$donated == 1, 'y', 'n')
donors_test$donated <- ifelse(donors_test$donated == 1, 'y', 'n')
donors_train$donated <- as.factor(donors_train$donated)
donors_test$donated <- as.factor(donors_test$donated)
# explore
summary(donors_train)
table(donated = donors_train$donated, donors_train$veteran)
table(donated = donors_train$donated, donors_train$bad_address)
table(donated = donors_train$donated, donors_train$has_children)
table(donated = donors_train$donated, donors_train$wealth_rating)
table(donated = donors_train$donated, donors_train$interest_veterans)
table(donated = donors_train$donated, donors_train$interest_religion)
table(donated = donors_train$donated, donors_train$pet_owner)
table(donated = donors_train$donated, donors_train$catalog_shopper)
table(donated = donors_train$donated, donors_train$recency)
table(donated = donors_train$donated, donors_train$frequency)
table(donated = donors_train$donated, donors_train$money)
#donors_train[duplicated(donors_train), ]
#donors_train <- donors_train[!duplicated(donors_train[,-1]), ]
# predict
set.seed(2018)
threshold <- 0.95
(donors_model_lap <- naive_bayes(donated ~ ., data = donors_train, laplace = 1))
(pred <- predict(donors_model_lap, donors_test, type = 'prob'))
pred[,1]
(pred_new <- ifelse(pred[,1] > threshold,
'n', 'y'))
(cmat <- table(donors_test$donated, pred_new))
# ROC curve
plot(performance(prediction(pred[,1], donors_test$donated == 'n'),
'tpr', 'fpr'))
# AUC
calAUC(pred[,1], donors_test$donated == 'n')
install.packages("ROSE")
